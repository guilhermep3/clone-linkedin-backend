generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model certificates {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(80)
  issuer     String    @db.VarChar(80)
  issue_date DateTime? @db.Date
  user_id    Int
  image      String?
  credential String    @db.VarChar(200)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model companies {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(100)
  username               String                   @unique(map: "username") @db.VarChar(40)
  email                  String                   @unique(map: "email") @db.VarChar(100)
  password               String                   @db.VarChar(255)
  phone                  String?                  @db.VarChar(20)
  country                String?                  @db.VarChar(40)
  state                  String?                  @db.VarChar(40)
  city                   String?                  @db.VarChar(80)
  industry               String                   @db.VarChar(40)
  bio                    String?                  @db.VarChar(200)
  about                  String?                  @db.Text
  website                String?                  @db.VarChar(200)
  avatar                 String                   @default("default.jpg") @db.VarChar(200)
  cover                  String                   @default("default.jpg") @db.VarChar(200)
  presentation_video_url String?                  @db.VarChar(400)
  size                   companies_size?
  type                   company_type             @default(Company)
  verified               Boolean                  @default(false)
  created_at             DateTime                 @default(now()) @db.Timestamp(0)
  vacancies              vacancies[]
  experience_validations experience_validations[]
  company_employees      company_employees[]
  experiences            experiences[]
}

model company_employees {
  id              Int                               @id @default(autoincrement())
  company_id      Int
  user_id         Int
  role            String                            @db.VarChar(100)
  employment_type company_employees_employment_type
  hired_at        DateTime                          @default(now()) @db.Timestamp(0)
  users           users                             @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "company_employees_ibfk_1")
  companies       companies                         @relation(fields: [company_id], references: [id])

  @@index([user_id], map: "user_id")
}

model educations {
  id             Int       @id @default(autoincrement())
  user_id        Int
  institution    String    @db.VarChar(80)
  diploma        String    @db.VarChar(80)
  field_of_study String    @db.VarChar(80)
  grade          String?   @db.VarChar(20)
  description    String    @db.VarChar(255)
  start_date     DateTime  @db.Date
  end_date       DateTime? @db.Date
  current        Boolean   @default(false)
  users          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model experience_skills {
  id            Int      @id @default(autoincrement())
  experience_id Int
  user_skill_id Int
  added_at      DateTime @default(now()) @db.Timestamp(0)

  experiences            experiences              @relation(fields: [experience_id], references: [id], onDelete: Cascade)
  user_skills            user_skills              @relation(fields: [user_skill_id], references: [id], onDelete: Cascade)
  experience_validations experience_validations[]

  @@index([experience_id])
  @@index([user_skill_id])
}

model experience_validations {
  id         Int      @id @default(autoincrement())
  company_id Int
  skill_id   Int
  created_at DateTime @default(now()) @db.Timestamp(0)

  experience_skills experience_skills @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  companies         companies         @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([skill_id])
  @@index([company_id])
}

model experiences {
  id                Int                 @id @default(autoincrement())
  user_id           Int
  company_id        Int
  role              String              @db.VarChar(100)
  description       String?             @db.Text
  start_date        DateTime            @db.Date
  end_date          DateTime?           @db.Date
  current           Boolean             @default(false)
  experience_skills experience_skills[]
  users             users               @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "experiences_ibfk_1")
  company           companies           @relation(fields: [company_id], references: [id], onUpdate: Restrict)

  @@index([user_id], map: "user_id")
}

model following {
  id             Int        @id @default(autoincrement())
  follower_id    Int
  follower_type  owner_type @default(user)
  following_id   Int
  following_type owner_type @default(user)
  added_at       DateTime   @default(now()) @db.Timestamp(0)

  @@index([follower_id, follower_type])
  @@index([following_id, following_type])
}

model notifications {
  id          Int                      @id @default(autoincrement())
  user_id     Int
  actor_id    Int?
  actor_type  owner_type
  type        notifications_type
  entity_id   Int?
  entity_type notification_entity_type
  message     String
  read        Boolean                  @default(false)
  created_at  DateTime                 @default(now())
}

model post_comments {
  id         Int        @id @default(autoincrement())
  owner_id   Int
  owner_type owner_type @default(user)
  post_id    Int
  content    String     @db.Text
  created_at DateTime   @default(now()) @db.Timestamp(0)
  posts      posts      @relation(fields: [post_id], references: [id], onUpdate: Restrict, map: "post_comments_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([owner_id, owner_type])
}

model post_likes {
  id         Int        @id @default(autoincrement())
  owner_id   Int
  owner_type owner_type @default(user)
  post_id    Int
  created_at DateTime   @default(now()) @db.Timestamp(0)
  posts      posts      @relation(fields: [post_id], references: [id], onUpdate: Restrict)

  @@index([post_id], map: "post_id")
  @@index([owner_id, owner_type])
}

model post_media {
  id         Int                   @id @default(autoincrement())
  owner_id   Int
  owner_type owner_type            @default(user)
  post_id    Int
  media_url  String                @db.VarChar(255)
  media_type post_media_media_type
  created_at DateTime              @default(now()) @db.Timestamp(0)
  posts      posts                 @relation(fields: [post_id], references: [id], onUpdate: Restrict)

  @@index([owner_id, owner_type])
}

model post_shares {
  id         Int        @id @default(autoincrement())
  owner_id   Int
  owner_type owner_type @default(user)
  post_id    Int
  created_at DateTime   @default(now()) @db.Timestamp(0)
  posts      posts      @relation(fields: [post_id], references: [id], onUpdate: Restrict, map: "post_shares_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([owner_id, owner_type])
}

model posts {
  id            Int             @id @default(autoincrement())
  owner_id      Int
  owner_type    owner_type      @default(user)
  content       String?         @db.Text
  visible       Boolean         @default(true)
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  post_comments post_comments[]
  post_likes    post_likes[]
  post_shares   post_shares[]
  post_media    post_media[]

  @@index([owner_id, owner_type])
}

model user_skills {
  id                Int                 @id @default(autoincrement())
  user_id           Int
  name              String              @db.VarChar(40)
  level             String              @db.VarChar(20)
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  users             users               @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_skills_ibfk_1")
  experience_skills experience_skills[]

  @@index([user_id], map: "user_id")
}

model users {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  username          String              @unique @db.VarChar(40)
  email             String              @unique(map: "email") @db.VarChar(100)
  password          String              @db.VarChar(255)
  phone             String?             @db.VarChar(20)
  birth_date        DateTime?           @db.Date
  country           String?             @db.VarChar(40)
  state             String?             @db.VarChar(40)
  city              String?             @db.VarChar(80)
  profession        String              @db.VarChar(40)
  bio               String?             @db.VarChar(200)
  about             String?             @db.Text
  website           String?             @db.VarChar(200)
  avatar            String              @default("default.jpg") @db.VarChar(200)
  cover             String              @default("default.jpg") @db.VarChar(200)
  verified          Boolean             @default(false)
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  company_employees company_employees[]
  experiences       experiences[]

  user_skills  user_skills[]
  vacancies    vacancies[]
  educations   educations[]
  certificates certificates[]
}

model vacancies {
  id               Int                        @id @default(autoincrement())
  title            String                     @db.VarChar(255)
  description      String                     @db.VarChar(1000)
  requirements     String?                    @db.VarChar(1000)
  benefits         String?                    @db.VarChar(1000)
  salary           Decimal?                   @db.Decimal(10, 2)
  user_posted_id   Int?
  company_id       Int
  published_at     DateTime                   @default(now()) @db.Timestamp(0)
  active           Boolean                    @default(true)
  experience_level vacancies_experience_level
  job_type         vacancies_job_type
  location         vacancies_location
  companies        companies                  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vacancies_ibfk_1")
  users            users?                     @relation(fields: [user_posted_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "vacancies_ibfk_2")

  @@index([company_id], map: "company_id")
  @@index([user_posted_id], map: "user_posted_id")
}

enum post_media_media_type {
  Image
  Video
  File
}

enum companies_size {
  Small
  Medium
  Large
}

enum company_type {
  Institution
  Company
}

enum company_employees_employment_type {
  Full_time
  Part_time
  Intern
  Contractor
  Partner
}

enum notifications_type {
  Like
  Comment
  Follow
  Share
}

enum notification_entity_type {
  Post
  User
  Vacancy
}

enum owner_type {
  user
  company
}

enum vacancies_experience_level {
  Intern
  Assistant
  Junior
  Mid
  Senior
  Director
  Executive
}

enum vacancies_job_type {
  Full_time @map("Full-time")
  Part_time @map("Part-time")
  Temporary
  Volunteer
  Other
}

enum vacancies_location {
  Remote
  Hybrid
  On_site @map("On-site")
}
